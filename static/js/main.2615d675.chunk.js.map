{"version":3,"sources":["components/Navbar/index.js","components/Picblock/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","PicBlock","props","onClick","click","id","src","image","alt","name","Game","state","progress","score","topScore","character","clicked","shuffle","cb","i","length","j","Math","floor","random","temp","console","log","clickedArray","_this","push","setState","chosen","currentScore","newCharacterArray","this","_this2","components_Navbar","map","person","Picblock","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2615d675.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar() {\n\n    return (\n        <div>\n            <nav className=\"navbar navbar-dark bg-primary\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"navbar-brand\">\n                        Clickerama: Superhero Edition\n        </li>\n                </ul>\n            </nav>\n        </div>\n\n    )\n\n};\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction PicBlock (props) {\n\n        return (\n            <span onClick={() => {props.click(props.id)}} >\n            <div className=\"img-container container\">\n           <img\n           src={props.image}\n           alt={props.name}\n           />\n           </div>\n           </span>\n        )\n};\n\nexport default PicBlock;","import React, { Component } from \"react\";\nimport Navbar from \"../Navbar\";\nimport Picblock from \"../Picblock\";\nimport character from \"../../characters.json\";\nimport \"./style.css\";\n\nclass Game extends Component {\n    state = {\n        progress: \"begin\",\n        score: 0,\n        topScore: 0,\n        character: character, \n        clicked : [],\n    };\n\n    shuffle = function (a, cb) {\n        var i = a.length;\n        while (0 !== i) {\n            let j = Math.floor(Math.random() * i);\n            i--;\n            var temp = a[i];\n            a[i] = a[j]\n            a[j] = temp\n        };\n       cb(a);\n    };\n\n    click = (id) => {\n        \n        console.log(id);\n        let clickedArray = this.state.clicked;\n\n        if (clickedArray.length === 0) {\n            clickedArray.push(id);\n            this.setState({clicked: clickedArray});\n            this.setState({score: this.state.score + 1});\n        }  \n\n        else {\n            var chosen = false;\n            var currentScore = 0;\n\n            for (var i = 0; i < clickedArray.length; i++) {\n                \n                if (clickedArray[i] === id) {\n                    chosen = true;\n                }\n\n            };\n                if (chosen === false) {\n                    clickedArray.push(id);\n                    this.setState({score: this.state.score + 1});\n                    this.setState({clicked: clickedArray})\n                }\n\n                else {\n                    currentScore = this.state.score;\n\n                    if (currentScore > this.state.topScore) {\n                        this.setState({topScore: currentScore})\n                    }\n\n                    this.setState({score: 0});\n                    this.setState({clicked:[]})\n                }\n        };\n\n        let newCharacterArray = this.state.character;\n\n        this.shuffle(newCharacterArray, () => {\n            console.log(newCharacterArray);\n            this.setState({ character: newCharacterArray });\n        });\n\n\n    };\n\n    componentDidMount(){\n        console.log(this.state.clicked.length)\n    };\n\n    componentDidUpdate(){\n        console.log(this.state.clicked)\n    };\n\n    render() {\n       \n        return (\n            <div className=\"container\">\n                <Navbar />\n                <div className=\"jumbotron\">\n                    <h1 className=\"display-4\">Test your memory!</h1>\n                    <p className=\"lead\">Increase your score by clicking on each picture, for a maximum total score of twelve. But make sure not to click on any picture more than once. Good luck!</p>\n                    <hr className=\"my-4\" />\n                    <p>Click on any picture to begin!</p>\n                    <p>Score: {this.state.score}</p>\n                    <p>Top Score: {this.state.topScore} </p>\n                </div>\n                <div className=\"Picblock\">\n                    {this.state.character.map((person) =>\n                        <Picblock\n                            image={person.image}\n                            name={person.name}\n                            id = {person.id}\n                            click={this.click}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n\n    }\n};\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game\";\n\nfunction App() {\n   \n      return (\n       <Game />\n      )\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}